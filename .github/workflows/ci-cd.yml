name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  CMAKE_VERSION: '3.20.0'
  CONAN_VERSION: '2.0.0'

jobs:
  build-and-test:
    name: Build and Test (${{ matrix.compiler }}, ${{ matrix.build_type }})
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [Debug, Release]
        include:
          - compiler: gcc
            cc: gcc
            cxx: g++
            package: gcc g++
          - compiler: clang
            cc: clang
            cxx: clang++
            package: clang
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ${{ matrix.package }} cmake ninja-build lcov python3-pip
        pip install conan==${{ env.CONAN_VERSION }}
    
    - name: Install Conan dependencies
      run: |
        conan profile detect --force
        conan install config/dependencies/ --output-folder=build/conan --build=missing -s build_type=${{ matrix.build_type }} -s compiler=${{ matrix.compiler }}
    
    - name: Configure CMake
      run: |
        cmake -S . -B build -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_TOOLCHAIN_FILE=build/conan/conan_toolchain.cmake -G "Ninja"
    
    - name: Build
      run: |
        cmake --build build
    
    - name: Run Tests
      run: |
        cd build
        ctest --output-on-failure
    
    - name: Run Sanitizers
      if: matrix.build_type == 'Debug'
      run: |
        ./scripts/sanitize.sh ${{ matrix.compiler }}
    
    - name: Run Static Analysis
      if: matrix.compiler == 'clang'
      run: |
        ./scripts/lint.sh -b build
    
    - name: Generate Coverage
      if: matrix.build_type == 'Debug'
      run: |
        ./scripts/coverage.sh ${{ matrix.compiler }}
    
    - name: Upload Coverage to Codecov
      if: matrix.build_type == 'Debug'
      uses: codecov/codecov-action@v3
      with:
        file: build-${{ matrix.compiler }}-coverage/coverage/coverage-filtered.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang cmake ninja-build python3-pip
        pip install conan==${{ env.CONAN_VERSION }}
    
    - name: Run Lint
      run: |
        ./scripts/lint.sh --fix
    
    - name: Check formatting
      run: |
        ./scripts/format.sh
    
    - name: Check for common issues
      run: |
        # Check for TODO comments
        if grep -r "TODO\|FIXME\|HACK" src/ --exclude-dir=build; then
          echo "Warning: TODO/FIXME/HACK comments found"
        fi
        
        # Check for long lines
        if find src/ -name "*.cpp" -o -name "*.h" -o -name "*.hpp" | xargs grep -n ".\{120\}"; then
          echo "Warning: Lines longer than 120 characters found"
        fi

  build-matrix:
    name: Build Matrix
    runs-on: ubuntu-latest
    needs: [build-and-test, quality-checks]
    
    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [Debug, Release, RelWithDebInfo]
        sanitize: [none, asan, usan]
        exclude:
          - build_type: Release
            sanitize: asan
          - build_type: Release
            sanitize: usan
          - compiler: gcc
            sanitize: tsan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ${{ matrix.compiler }} cmake ninja-build python3-pip
        pip install conan==${{ env.CONAN_VERSION }}
    
    - name: Build with sanitizers
      if: matrix.sanitize != 'none'
      run: |
        ./scripts/build-${{ matrix.compiler }}.sh ${{ matrix.build_type }} --${{ matrix.sanitize }}
    
    - name: Build without sanitizers
      if: matrix.sanitize == 'none'
      run: |
        ./scripts/build-${{ matrix.compiler }}.sh ${{ matrix.build_type }}

  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: [build-and-test, quality-checks]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc clang cmake ninja-build python3-pip
        pip install conan==${{ env.CONAN_VERSION }}
    
    - name: Build Release versions
      run: |
        ./scripts/build-gcc.sh Release
        ./scripts/build-clang.sh Release
    
    - name: Run benchmarks
      run: |
        # Run performance benchmarks
        echo "Running performance benchmarks..."
        # TODO: Add actual benchmark commands here
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: benchmark-results
        path: |
          benchmark-*.json
          benchmark-*.csv

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build-and-test, quality-checks]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan.sarif'
    
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'security-scan.sarif'